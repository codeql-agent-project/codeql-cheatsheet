[{"id":"access-of-field","name":"Access Of Field","date":"","language":"cpp","description":"Finds field read `<field name>` on instance of class type `<class typename>`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Field f, FieldAccess access\nwhere\n  f.hasName('aDate') and\n  f.getDeclaringType().hasName('Order') and\n  f = access.getTarget()\nselect access","complexity":"basic"},{"id":"address-of-reference-variable","name":"Address of reference variable","date":"2022-12-7T14:38:34+07:00","language":"cpp","description":"Finds address-of expressions (`&`) that take the address of a reference variable","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom AddressOfExpr addr, VariableAccess access\nwhere\n  access = addr.getOperand() and\n  access.getTarget().getType() instanceof ReferenceType\nselect addr","complexity":"basic"},{"id":"aliased-ssa-consistency-check","name":"Aliased SSA Consistency Check","date":"2022-12-7T14:40:34+07:00","language":"cpp","description":"Performs consistency checks on the SSA construction. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import SSAConsistency","complexity":"basic"},{"id":"aliased-ssa-ir-consistency-check","name":"Aliased SSA IR Consistency Check","date":"2022-12-7T15:04:34+07:00","language":"cpp","description":"Performs consistency checks on the Intermediate Representation. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import IRConsistency","complexity":"basic"},{"id":"array-access","name":"Array access","date":"2022-12-7T15:07:34+07:00","language":"cpp","description":"Finds array access expressions with an index expression consisting of a postfix increment (`++`) expression.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom ArrayExpr a\nwhere a.getArrayOffset() instanceof PostfixIncrExpr\nselect a","complexity":"basic"},{"id":"call-to-constructor","name":"Call to constructor","date":"2022-12-7T15:08:34+07:00","language":"cpp","description":"Finds places where we call `new MyClass(...)`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom NewExpr new, Constructor c\nwhere\n  c = new.getInitializer().(ConstructorCall).getTarget() and\n  c.getName() = 'MyClass'\nselect new","complexity":"basic"},{"id":"call-to-function","name":"Call to function","date":"2022-12-7T15:12:34+07:00","language":"cpp","description":"Finds calls to `std::map<...>::find()`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom FunctionCall call, Function fcn\nwhere\n  call.getTarget() = fcn and\n  fcn.getDeclaringType().getSimpleName() = 'map' and\n  fcn.getDeclaringType().getNamespace().getName() = 'std' and\n  fcn.hasName('find')\nselect call","complexity":"basic"},{"id":"cast-expressions","name":"Cast expressions","date":"2022-12-7T15:14:34+07:00","language":"cpp","description":"Finds casts from a floating point type to an integer type","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Cast c\nwhere\n  c.getExpr().getType() instanceof FloatingPointType and\n  c.getType() instanceof IntegralType\nselect c","complexity":"basic"},{"id":"catch-exception","name":"Catch exception","date":"2022-12-7T15:15:34+07:00","language":"cpp","description":"Finds places where we catch exceptions of type `parse_error`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom CatchBlock catch\n// `stripType` converts `const parse_error &` to `parse_error`.\nwhere catch.getParameter().getType().stripType().hasName(parse_error')\nselect catch","complexity":"basic"},{"id":"class-derives-from","name":"Class derives from","date":"2022-12-7T15:17:34+07:00","language":"cpp","description":"Finds classes that derive from `std::exception`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Class type\nwhere\n  type.getABaseClass+().hasName('exception') and\n  type.getNamespace().getName() = 'std'\nselect type","complexity":"basic"},{"id":"conditional-expressions","name":"Conditional Expressions","date":"2022-10-21T01:12:34+07:00","language":"cpp","description":"Finds conditional expressions of the form `... ? ... : ...` where the types of the resulting expressions differ","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom ConditionalExpr e\nwhere e.getThen().getType() != e.getElse().getType()\nselect e","complexity":"basic"},{"id":"const-method-without-return-type","name":"Const method without return type","date":"2022-12-7T15:19:34+07:00","language":"cpp","description":"Finds const methods whose return type is `void`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom MemberFunction m\nwhere\n  m.hasSpecifier('const') and\n  m.getType() instanceof VoidType\nselect m","complexity":"basic"},{"id":"empty-blocks","name":"Empty blocks","date":"2022-12-7T15:20:34+07:00","language":"cpp","description":"Finds empty block statements","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom BlockStmt blk\nwhere blk.getNumStmt() = 0\nselect blk","complexity":"basic"},{"id":"equality-test-on-boolean","name":"Equality test on boolean","date":"2022-12-7T15:22:34+07:00","language":"cpp","description":"Finds tests like `==true`, `!=true`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom EqualityOperation eq, Expr trueExpr\nwhere\n  trueExpr = eq.getAnOperand() and\n  trueExpr.getType() instanceof BoolType and\n  trueExpr.getValue().toInt() = 1\nselect eq","complexity":"basic"},{"id":"find-references-links","name":"Find-references links","date":"2022-12-7T16:18:34+07:00","language":"cpp","description":"Generates use-definition pairs that provide the data for find-references in the code viewer of VSCode.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Top e, Top def, string kind\nwhere\n  def = definitionOf(e, kind) and def.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"functions-with-many-parameters","name":"Functions with many parameters","date":"2022-12-7T15:26:34+07:00","language":"cpp","description":"Finds functions or methods with more than 10 parameters","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Function fcn\nwhere fcn.getNumberOfParameters() > 10\nselect fcn","complexity":"basic"},{"id":"if-statements-with-empty-then-branch","name":"If statements with empty then branch","date":"2022-12-7T15:31:34+07:00","language":"cpp","description":"Finds `if` statements where the `then` branch is an empty block statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom IfStmt i\nwhere i.getThen().(BlockStmt).getNumStmt() = 0\nselect i","complexity":"basic"},{"id":"integer-literal","name":"Integer literal","date":"2022-12-7T15:33:34+07:00","language":"cpp","description":"Finds places where we use the integer literal `2`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Literal literal\nwhere\n  literal.getType() instanceof IntType and\n  literal.getValue().toInt() = 2\nselect literal","complexity":"basic"},{"id":"ir-consistency-check","name":"IR Consistency Check","date":"2022-12-7T15:29:34+07:00","language":"cpp","description":"Performs consistency checks on the Intermediate Representation. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import implementation.aliased_ssa.IRConsistency","complexity":"basic"},{"id":"jump-to-definition-links","name":"Jump-to-definition links","date":"2022-12-7T16:19:34+07:00","language":"cpp","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer of VSCode.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Top e, Top def, string kind\nwhere def = definitionOf(e, kind) and e.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"mutual-recursion","name":"Mutual recursion","date":"2022-12-7T15:34:34+07:00","language":"cpp","description":"Finds pairs of functions that call each other","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Function m, Function n\nwhere\n  exists(FunctionCall c | c.getEnclosingFunction() = m and c.getTarget() = n) and\n  exists(FunctionCall c | c.getEnclosingFunction() = n and c.getTarget() = m) and\n  m != n\nselect m, n","complexity":"basic"},{"id":"override-of-method","name":"Override of method","date":"2022-12-7T15:26:34+07:00","language":"cpp","description":"Finds methods that override `std::exception::what()`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom MemberFunction override, MemberFunction base\nwhere\n  base.getName() = 'what' and\n  base.getDeclaringType().getName() = 'exception' and\n  base.getDeclaringType().getNamespace().getName() = 'std' and\n  override.overrides+(base)\nselect override","complexity":"basic"},{"id":"padding-consistency-check","name":"Padding Consistency Check","date":"2022-12-7T15:26:34+07:00","language":"cpp","description":"Performs consistency checks for the padding library. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import Padding\n\n/*\n * Consistency-check: Find discrepancies between computed and actual size on LP64.\n */\n\n/*\n * from Type t, LP64 a, int padded, int bit, int real, MemberVariable v\n * where padded = a.paddedSize(t) and bit = a.bitSize(t)\n * and real = t.getSize() * 8 and padded != real and count(t.getSize()) = 1\n * select t, a.paddedSize(t) as Padded, real, v, t.(PaddedType).memberSize(v, a)\n */\n\n/*\n * from PaddedType t, LP64 a, MemberVariable v\n * where t instanceof Union and v = t.getAMember() and not exists(t.memberSize(v, a))\n * select t, v, v.getType().explain()\n */\n\n/*\n * from PaddedType t, LP64 a, MemberVariable v\n * where not exists(a.paddedSize(t))\n * select t, t.fieldIndex(v) as i, v, t.memberSize(v, a) order by t, i\n */\n\nfrom PaddedType t, LP64 a\nwhere a.wastedSpace(t) != 0\nselect t, a.paddedSize(t) as size, a.wastedSpace(t) as waste order by waste desc","complexity":"basic"},{"id":"print-aliased-ssa-ir","name":"Print Aliased SSA IR","date":"2022-12-7T16:13:34+07:00","language":"cpp","description":"Outputs a representation of the Aliased SSA IR graph","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import PrintIR","complexity":"basic"},{"id":"print-ast","name":"Print AST","date":"2022-12-7T16:06:34+07:00","language":"cpp","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\nimport semmle.code.cpp.PrintAST\nimport definitions\n\n/**\n * The source file to generate an AST from.\n */\nexternal string selectedSourceFile();\n\nclass Cfg extends PrintAstConfiguration {\n  /**\n   * Holds if the AST for `func` should be printed.\n   * Print All functions from the selected file.\n   */\n  override predicate shouldPrintFunction(Function func) {\n    func.getFile() = getFileBySourceArchiveName(selectedSourceFile())\n  }\n}","complexity":"basic"},{"id":"print-ir","name":"Print IR","date":"2022-12-7T16:15:34+07:00","language":"cpp","description":"Outputs a representation of the IR graph","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import implementation.aliased_ssa.PrintIR","complexity":"basic"},{"id":"print-raw-ir","name":"Print Raw IR","date":"2022-12-7T16:13:34+07:00","language":"cpp","description":"Outputs a representation of the Raw IR graph","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import PrintIR","complexity":"basic"},{"id":"print-ssa-ir","name":"Print SSA IR","date":"2022-12-7T16:17:34+07:00","language":"cpp","description":"Outputs a representation of the SSA IR graph","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import PrintIR","complexity":"basic"},{"id":"raw-ir-consistency-check","name":"Raw IR Consistency Check","date":"2022-12-7T15:39:34+07:00","language":"cpp","description":"Performs consistency checks on the Intermediate Representation. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import IRConsistency","complexity":"basic"},{"id":"return-statements","name":"Return statements","date":"2022-12-7T15:26:34+07:00","language":"cpp","description":"Finds return statements that return `0`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom ReturnStmt r\nwhere r.getExpr().(Literal).getValue().toInt() = 0\nselect r","complexity":"basic"},{"id":"singleton-blocks","name":"Singleton blocks","date":"2022-12-7T15:50:34+07:00","language":"cpp","description":"Finds block statements containing a single statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom BlockStmt b\nwhere b.getNumStmt() = 1\nselect b","complexity":"basic"},{"id":"ssa-ir-consistency-check","name":"SSA IR Consistency Check","date":"2022-12-7T15:48:34+07:00","language":"cpp","description":"Performs consistency checks on the Intermediate Representation. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import IRConsistency","complexity":"basic"},{"id":"switch-statement-case-missing","name":"Switch statement case missing","date":"2022-12-7T15:52:34+07:00","language":"cpp","description":"Finds switch statements with a missing enum constant case and no default case","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom EnumSwitch es, EnumConstant ec\nwhere\n  ec = es.getAMissingCase() and\n  not es.hasDefaultCase()\nselect es, ec","complexity":"basic"},{"id":"throw-exception-of-type","name":"Throw exception of type","date":"2022-12-7T15:56:34+07:00","language":"cpp","description":"Finds places where we throw `parse_error` or one of its sub-types","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom ThrowExpr throw\nwhere throw.getType().(Class).getABaseClass*().getName() = 'parse_error'\nselect throw","complexity":"basic"},{"id":"todo-comments","name":"TODO comments","date":"2022-12-7T15:54:34+07:00","language":"cpp","description":"Finds comments containing the word 'TODO'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Comment c\nwhere c.getContents().matches('%TODO%')\nselect c","complexity":"basic"},{"id":"unaliased-ssa-consistency-check","name":"Unaliased SSA Consistency Check","date":"2022-12-7T15:57:34+07:00","language":"cpp","description":"Performs consistency checks on the SSA construction. This query should have no results.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import SSAConsistency","complexity":"basic"},{"id":"unused-local-variable","name":"Unused local variable","date":"2022-12-7T15:59:34+07:00","language":"cpp","description":"Finds local variables that are not accessed","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom LocalScopeVariable v\nwhere\n  not v instanceof Parameter and\n  not exists(v.getAnAccess())\nselect v","complexity":"basic"},{"id":"unused-parameter","name":"Unused parameter","date":"2022-12-7T16:02:34+07:00","language":"cpp","description":"Finds parameters that are not accessed","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Parameter p\nwhere p.isNamed() and not exists(p.getAnAccess())\nselect p","complexity":"basic"},{"id":"unused-private-method","name":"Unused private method","date":"2022-12-7T16:03:34+07:00","language":"cpp","description":"Finds private non-virtual methods that are not accessed","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom MemberFunction fcn\nwhere\n  fcn.isPrivate() and\n  not fcn.isVirtual() and\n  not exists(FunctionCall call | fcn = call.getTarget())\nselect fcn.getDefinition()","complexity":"basic"},{"id":"variable-declared-volatile","name":"Variable declared volatile","date":"2022-12-7T16:05:34+07:00","language":"cpp","description":"Finds variables with a `volatile` modifier","author":"LGTM","authorURL":"https://lgtm.com/query/lang:cpp/","tags":["cpp","basic","pattern"],"categories":[],"code":"import cpp\n\nfrom Variable f\nwhere f.isVolatile()\nselect f","complexity":"basic"},{"id":"add-null-to-collection","name":"Add null to collection","date":"","language":"csharp","description":"Finds places where we add 'null' to a collection.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom MethodCall call, Method add\nwhere\n  call.getTarget() = add.getAnUltimateImplementor*() and\n  add.hasName(\"Add\") and\n  add.getDeclaringType()\n      .getUnboundDeclaration()\n      .hasQualifiedName(\"System.Collections.Generic.ICollection<>\") and\n  call.getAnArgument() instanceof NullLiteral\nselect call","complexity":"basic"},{"id":"array-access","name":"Array access","date":"","language":"csharp","description":"Finds array access expressions with an index expression consisting of a unary increment or decrement, e.g. 'a[i++]'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom ArrayAccess a\nwhere a.getAnIndex() instanceof MutatorOperation\nselect a","complexity":"basic"},{"id":"call-to-constructor","name":"Call to constructor","date":"","language":"csharp","description":"Finds places where we call 'new System.Exception(...)'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\nfrom ThrowStmt throw\nwhere throw.getThrownExceptionType().getBaseClass*().hasQualifiedName(\"System.IO.IOException\")\nselect throw","complexity":"basic"},{"id":"call-to-method","name":"Call to method","date":"","language":"csharp","description":"Finds calls to method 'Company.Class.MethodName'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom MethodCall call, Method method\nwhere\n  call.getTarget() = method and\n  method.hasName(\"MethodName\") and\n  method.getDeclaringType().hasQualifiedName(\"Company.Class\")\nselect call","complexity":"basic"},{"id":"cast-expressions","name":"Cast expressions","date":"","language":"csharp","description":"Finds casts from a floating point type to an integer type.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom CastExpr c\nwhere\n  c.getExpr().getType() instanceof FloatingPointType and\n  c.getType() instanceof IntegralType\nselect c","complexity":"basic"},{"id":"catch-exception","name":"Catch exception","date":"","language":"csharp","description":"Finds places where we catch exceptions of type 'System.IO.IOException'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom CatchClause catch\nwhere catch.getCaughtExceptionType().hasQualifiedName(\"System.IO.IOException\")\nselect catch","complexity":"basic"},{"id":"class-extends-implement","name":"Class extends/implements","date":"","language":"csharp","description":"Finds classes/interfaces that extend/implement 'System.Collections.IEnumerator'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom RefType type\nwhere type.getABaseType+().hasQualifiedName(\"System.Collections.IEnumerator\")\nselect type","complexity":"basic"},{"id":"conditional-expression","name":"Conditional expression","date":"","language":"csharp","description":"Finds conditional expressions of the form '... ? ... : ...' where the types of the resulting expressions differ.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom ConditionalExpr e\nwhere\n  e.getThen().stripImplicitCasts() != e.getElse().stripImplicitCasts() and\n  not e.getThen().getType() instanceof NullType and\n  not e.getElse().getType() instanceof NullType\nselect e","complexity":"basic"},{"id":"empty-blocks","name":"Empty blocks","date":"","language":"csharp","description":"Finds empty block statements.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom BlockStmt blk\nwhere blk.isEmpty()\nselect blk","complexity":"basic"},{"id":"equality-test-on-boolean","name":"Equality test on Boolean","date":"","language":"csharp","description":"Finds tests like 'x==true', 'x==false', 'x!=true', '!=false'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom EqualityOperation eq\nwhere eq.getAnOperand() instanceof BoolLiteral\nselect eq","complexity":"basic"},{"id":"expression-qualifier","name":"Expression qualifier","date":"","language":"csharp","description":"Finds qualified expressions (e.g. 'a.b()') and their qualifiers ('a').","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom QualifiableExpr qualifiedExpr, Expr qualifier\nwhere qualifier = qualifiedExpr.getQualifier()\nselect qualifiedExpr, qualifier","complexity":"basic"},{"id":"extern-method","name":"Extern methods","date":"","language":"csharp","description":"Finds methods that are 'extern'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Method m\nwhere m.isExtern()\nselect m","complexity":"basic"},{"id":"field-declared-volatile","name":"Fields declared volatile","date":"","language":"csharp","description":"Finds fields with a 'volatile' modifier.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Field f\nwhere f.isVolatile()\nselect f","complexity":"basic"},{"id":"find-reference-links","name":"Find-references links","date":"","language":"csharp","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Use e, Declaration def, string kind\nwhere\n  def = definitionOf(e, kind) and def.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"if-statement-with-empty-then-branch","name":"If statements with empty then branch","date":"","language":"csharp","description":"Finds 'if' statements where the 'then' branch is an empty block statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom IfStmt i\nwhere i.getThen().(BlockStmt).isEmpty()\nselect i","complexity":"basic"},{"id":"integer-literal","name":"Integer literal","date":"","language":"csharp","description":"Finds places where we use the integer literal '0'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom IntegerLiteral literal\nwhere literal.getValue().toInt() = 0\nselect literal","complexity":"basic"},{"id":"jump-to-definition-links","name":"Jump-to-definition links","date":"","language":"csharp","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Use e, Declaration def, string kind, string filepath\nwhere\n  def = definitionOf(e, kind) and\n  e.hasLocationInfo(filepath, _, _, _, _) and\n  filepath = getFileBySourceArchiveName(selectedSourceFile()).getAbsolutePath()\nselect e, def, kind","complexity":"basic"},{"id":"method-with-many-parameter","name":"Methods with many parameters","date":"","language":"csharp","description":"Finds methods with more than ten parameters.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Method m\nwhere m.getNumberOfParameters() > 10\nselect m","complexity":"basic"},{"id":"method-without-return-type","name":"Methods without return type","date":"","language":"csharp","description":"Finds methods whose return type is 'void'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Method m\nwhere m.getReturnType() instanceof VoidType\nselect m","complexity":"basic"},{"id":"mutual-recursion","name":"Mutual recursion","date":"","language":"csharp","description":"Finds pairs of methods that call each other.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Method m, Method n\nwhere\n  m.calls(n) and\n  n.calls(m) and\n  m != n\nselect m, n","complexity":"basic"},{"id":"override-of-method","name":"Override of method","date":"","language":"csharp","description":"Finds methods that directly override 'Object.ToString'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Method override, Method base\nwhere\n  base.hasName(\"ToString\") and\n  base.getDeclaringType().hasQualifiedName(\"System.Object\") and\n  base.getAnOverrider() = override\nselect override","complexity":"basic"},{"id":"print-source-ast","name":"Print source code AST","date":"","language":"csharp","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\nimport semmle.code.csharp.PrintAst\nimport definitions\n\n/**\n * The source file to generate an AST from.\n */\nexternal string selectedSourceFile();\n\nclass PrintAstConfigurationOverride extends PrintAstConfiguration {\n  /**\n   * Holds if the location matches the selected file in the VS Code extension and\n   * the element is `fromSource`.\n   */\n  override predicate shouldPrint(Element e, Location l) {\n    super.shouldPrint(e, l) and\n    l.getFile() = getFileBySourceArchiveName(selectedSourceFile())\n  }\n}","complexity":"basic"},{"id":"read-of-field","name":"Read of field","date":"","language":"csharp","description":"Finds reads of 'VirtualAddress' (defined on 'Mono.Cecil.PE.Section').","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Field f, FieldRead read\nwhere\n  f.hasName(\"VirtualAddress\") and\n  f.getDeclaringType().hasQualifiedName(\"Mono.Cecil.PE.Section\") and\n  f = read.getTarget()\nselect read","complexity":"basic"},{"id":"return-statements","name":"Return statements","date":"","language":"csharp","description":"Finds return statements that return 'null'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom ReturnStmt r\nwhere r.getExpr() instanceof NullLiteral\nselect r","complexity":"basic"},{"id":"singleton-blocks","name":"Singleton blocks","date":"","language":"csharp","description":"Finds block statements containing a single statement.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom BlockStmt b\nwhere b.getNumberOfStmts() = 1\nselect b","complexity":"basic"},{"id":"switch-statement-case-missing","name":"Switch statement case missing","date":"","language":"csharp","description":"Finds switch statements with a missing enum constant case and no default case.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom SwitchStmt switch, Enum enum, EnumConstant missing\nwhere\n  switch.getCondition().getType() = enum and\n  missing.getDeclaringType() = enum and\n  not switch.getAConstCase().getExpr() = missing.getAnAccess() and\n  not exists(switch.getDefaultCase())\nselect switch","complexity":"basic"},{"id":"throw-exception-of-given-type","name":"Throw exception of given type","date":"","language":"csharp","description":"Finds places where we throw 'System.IO.IOException' or one of its subtypes.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom ObjectCreation new\nwhere new.getObjectType().hasQualifiedName(\"System.Exception\")\nselect new","complexity":"basic"},{"id":"todo-comments","name":"TODO comments","date":"","language":"csharp","description":"Finds comments containing the word \"TODO\".","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom CommentLine c\nwhere c.getText().regexpMatch(\"(?si).*\\bTODO\\b.*\")\nselect c","complexity":"basic"},{"id":"try-finally-statements","name":"Try-finally statements","date":"","language":"csharp","description":"Finds try-finally statements without a catch clause.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom TryStmt t\nwhere\n  exists(t.getFinally()) and\n  not exists(t.getACatchClause())\nselect t","complexity":"basic"},{"id":"unused-local-variable","name":"Unused local variable","date":"","language":"csharp","description":"Finds local variables that are not accessed.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom LocalVariable v\nwhere not exists(v.getAnAccess())\nselect v","complexity":"basic"},{"id":"unused-parameter","name":"Unused parameter","date":"","language":"csharp","description":"Finds parameters that are not accessed.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:csharp/","tags":["csharp","basic","pattern"],"categories":[],"code":"import csharp\n\nfrom Parameter p\nwhere not exists(p.getAnAccess())\nselect p","complexity":"basic"},{"id":"call-to-built-in-function","name":"Call to built-in function","date":"2022-12-2T15:32:34+07:00","language":"go","description":"Finds calls to the built-in `len` function.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom DataFlow::CallNode call\nwhere call = Builtin::len().getACall()\nselect call","complexity":"basic"},{"id":"call-to-library-function","name":"Call to library function","date":"2022-12-2T15:32:34+07:00","language":"go","description":"Finds calls to \"fmt.Println.\"","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Function println, DataFlow::CallNode call\nwhere\n  println.hasQualifiedName('fmt', 'Println') and\n  call = println.getACall()\nselect call","complexity":"basic"},{"id":"call-to-method","name":"Call to method","date":"2022-12-2T15:41:34+07:00","language":"go","description":"Finds calls to the `Get` method of type `Header` from the `net/http` package.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Method get, DataFlow::CallNode call\nwhere\n  get.hasQualifiedName('net/http', 'Header', 'Get') and\n  call = get.getACall()\nselect call","complexity":"basic"},{"id":"comparison-with-nil","name":"Comparison with nil","date":"2022-12-2T15:53:34+07:00","language":"go","description":"Finds comparisons with nil.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom DataFlow::EqualityTestNode eq, DataFlow::Node nd, DataFlow::Node nil\nwhere\n  nil = Builtin::nil().getARead() and\n  eq.eq(_, nd, nil)\nselect eq","complexity":"basic"},{"id":"comparison-with-zero","name":"Comparison with zero","date":"2022-12-2T15:55:34+07:00","language":"go","description":"Finds comparisons between an unsigned value and zero.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom DataFlow::RelationalComparisonNode cmp, DataFlow::Node unsigned, DataFlow::Node zero\nwhere\n  zero.getNumericValue() = 0 and\n  unsigned.getType().getUnderlyingType() instanceof UnsignedIntegerType and\n  cmp.leq(_, zero, unsigned, 0)\nselect cmp, unsigned","complexity":"basic"},{"id":"compile-time-constant","name":"Compile-time constant","date":"2022-12-2T16:07:34+07:00","language":"go","description":"Finds compile-time constants with value zero.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom DataFlow::Node zero\nwhere zero.getNumericValue() = 0\nselect zero","complexity":"basic"},{"id":"field-read","name":"Field read","date":"2022-12-2T16:10:34+07:00","language":"go","description":"Finds code that reads `Request.Method`.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Field reqm, Read read\nwhere\n  reqm.hasQualifiedName('net/http', 'Request', 'Method' and\n  read = reqm.getARead()\nselect read","complexity":"basic"},{"id":"field-write","name":"Field write","date":"2022-12-2T16:18:34+07:00","language":"go","description":"Finds assignments to field `Status` of type `Response` from package `net/http`.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Field status, Write write\nwhere\n  status.hasQualifiedName('net/http', 'Response', 'Status') and\n  write = status.getAWrite()\nselect write, write.getRhs()","complexity":"basic"},{"id":"find-references-links","name":"Find-references links","date":"2022-12-2T17:25:34+07:00","language":"go","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\nimport ideContextual\n\nexternal string selectedSourceFile();\n\nfrom Ident def, Ident use, Entity e\nwhere\n  use.uses(e) and\n  def.declares(e) and\n  def.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect use, def, \"V\"","complexity":"basic"},{"id":"function","name":"Function","date":"2022-12-2T16:18:34+07:00","language":"go","description":"Finds functions called 'main'.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Function main\nwhere main.getName() = 'main'\nselect main","complexity":"basic"},{"id":"if-statements-with-empty-then-branch","name":"If statements with empty then branch","date":"2022-12-2T16:23:34+07:00","language":"go","description":"Finds 'if' statements where the 'then' branch is an empty block statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom IfStmt i\nwhere i.getThen().getNumStmt() = 0\nselect i","complexity":"basic"},{"id":"increment-statements-in-loops","name":"Increment statements in loops","date":"2022-12-2T16:25:34+07:00","language":"go","description":"Finds increment statements that are nested in a loop","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom IncStmt s, LoopStmt l\nwhere s.getParent+() = l\nselect s, l","complexity":"basic"},{"id":"jump-to-definition-links","name":"Jump-to-definition links","date":"2022-12-2T17:26:34+07:00","language":"go","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\nimport ideContextual\n\nexternal string selectedSourceFile();\n\nfrom Ident def, Ident use, Entity e\nwhere\n  use.uses(e) and\n  def.declares(e) and\n  use.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect use, def, \"V\"","complexity":"basic"},{"id":"pointer-type","name":"Pointer Type","date":"2022-12-2T16:52:50+07:00","language":"go","description":"Finds pointer type `*Request` from package `net/http`.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Type reqtp, PointerType reqptrtp\nwhere\n  reqtp.hasQualifiedName(\"net/http\", \"Request\") and\n  reqptrtp.getBaseType() = reqtp\nselect reqptrtp","complexity":"basic"},{"id":"parameter","name":"Parameter","date":"2022-12-2T16:28:34+07:00","language":"go","description":"Finds parameters of type \"ResponseWriter\" from package \"net/http\".","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Parameter req\nwhere req.getType().hasQualifiedName('net/http', 'ResponseWriter')\nselect req","complexity":"basic"},{"id":"print-ast","name":"Print AST","date":"2022-12-2T17:23:34+07:00","language":"go","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\nimport semmle.go.PrintAst\nimport ideContextual\n\n/**\n * The source file to generate an AST from.\n */\nexternal string selectedSourceFile();\n\n/**\n * Hook to customize the functions printed by this query.\n */\nclass Cfg extends PrintAstConfiguration {\n  override predicate shouldPrintFunction(FuncDecl func) { shouldPrintFile(func.getFile()) }\n\n  override predicate shouldPrintFile(File file) {\n    file = getFileBySourceArchiveName(selectedSourceFile())\n  }\n\n  override predicate shouldPrintComments(File file) { none() }\n}","complexity":"basic"},{"id":"receiver-variable","name":"Receiver variable","date":"2022-12-2T16:30:34+07:00","language":"go","description":"Finds receiver variables of pointer type.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom ReceiverVariable recv\nwhere recv.getType() instanceof PointerType\nselect recv","complexity":"basic"},{"id":"result-variable","name":"Result variable","date":"2022-12-2T16:18:34+07:00","language":"go","description":"Finds result variables of type \"error\".","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom ResultVariable err\nwhere err.getType() = Builtin::error().getType()\nselect err","complexity":"basic"},{"id":"type-information","name":"Type information","date":"2022-12-2T16:54:50+07:00","language":"go","description":"Finds code elements of type `*Request` from package `net/http`.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Type reqtp, PointerType reqptrtp, DataFlow::Node req\nwhere\n  reqtp.hasQualifiedName(\"net/http\", \"Request\") and\n  reqptrtp.getBaseType() = reqtp and\n  req.getType() = reqptrtp\nselect req","complexity":"basic"},{"id":"type","name":"Type","date":"2022-12-2T16:50:50+07:00","language":"go","description":"Finds type `Request` from package `net/http`.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Type reqtp, PointerType reqptrtp\nwhere\n  reqtp.hasQualifiedName(\"net/http\", \"Request\") and\n  reqptrtp.getBaseType() = reqtp\nselect reqptrtp","complexity":"basic"},{"id":"variable-read","name":"Variable read","date":"2022-12-2T17:02:34+07:00","language":"go","description":"Finds code that reads a variable called `err`.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Variable err, Read read\nwhere\n  err.getName() = \"err\" and\n  read = err.getARead()\nselect read","complexity":"basic"},{"id":"variable-write","name":"Variable write","date":"2022-12-2T17:14:34+07:00","language":"go","description":"Finds assignments to variables named \"err\".","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Variable err, Write write\nwhere\n  err.getName() = 'err' and\n  write = err.getAWrite()\nselect write, write.getRhs()","complexity":"basic"},{"id":"variable","name":"Variable","date":"2022-12-2T16:58:34+07:00","language":"go","description":"Finds variables called \"err\".","author":"LGTM","authorURL":"https://lgtm.com/query/lang:go/","tags":["go","basic","pattern"],"categories":[],"code":"import go\n\nfrom Variable err\nwhere err.getName() = \"err\"\nselect err, err.getDeclaration()","complexity":"basic"},{"id":"add-null-to-collection","name":"Add Null to Collection","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds places where we add null to a collection","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom MethodAccess call, Method add\nwhere\n  call.getMethod().overrides*(add) and\n  add.hasName('add') and\n  add.getDeclaringType().getSourceDeclaration().hasQualifiedName('java.util', 'Collection') and\n  call.getAnArgument() instanceof NullLiteral\nselect call","complexity":"basic"},{"id":"array-access","name":"Array Access","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds array access expressions with an index expression consisting of a unary assignment","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom ArrayAccess a\nwhere a.getIndexExpr() instanceof UnaryAssignExpr\nselect a","complexity":"basic"},{"id":"call-to-constructor","name":"Call to constructor","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds places where we call `new com.example.Class(...)`","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom ClassInstanceExpr new\nwhere new.getConstructedType().hasQualifiedName('com.example', 'Class')\nselect new","complexity":"basic"},{"id":"call-to-method","name":"Call To Method","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds calls to com.example.Class.methodName","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom MethodAccess call, Method method\nwhere\n  call.getMethod() = method and\n  method.hasName('methodName') and\n  method.getDeclaringType().hasQualifiedName('com.example', 'Class')\nselect call","complexity":"basic"},{"id":"cast-expressions","name":"Cast expressions","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds casts from a floating point type to an integer type","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom CastExpr c\nwhere\n  c.getExpr().getType() instanceof FloatingPointType and\n  c.getType() instanceof IntegralType\nselect c","complexity":"basic"},{"id":"catch-exception","name":"Catch Exception","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds places where we catch exceptions of type com.example.AnException","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom CatchClause catch\nwhere catch.getACaughtType().hasQualifiedName('com.example', 'AnException')\nselect catch","complexity":"basic"},{"id":"class-extends-implements","name":"Class extends/implements","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds classes/interfaces that extend/implement com.example.Class","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom RefType type\nwhere type.getAStrictAncestor().hasQualifiedName('com.example', 'Class')\nselect type","complexity":"basic"},{"id":"comments","name":"Find comments match pattern","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds comments containing the word 'TODO'","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom JavadocText c\nwhere c.getText().regexpMatch('(?si).*\\bTODO\\b.*')\nselect c","complexity":"basic"},{"id":"conditional-expressions","name":"Conditional Expressions","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds conditional expressions of the form '... ? ... : ...' where the types of the resulting expressions differ","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom ConditionalExpr e\nwhere\n  e.getTrueExpr().getType() != e.getFalseExpr().getType() and\n  not e.getTrueExpr().getType() instanceof NullType and\n  not e.getFalseExpr().getType() instanceof NullType\nselect e","complexity":"basic"},{"id":"empty-blocks","name":"Empty Blocks","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds empty block statements","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom BlockStmt blk\nwhere blk.getNumStmt() = 0\nselect blk","complexity":"basic"},{"id":"equality-test-on-boolean","name":"Equality test on boolean","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds tests like `==true`, `==false`, `!=true`, `!=false`","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom EqualityTest eq\nwhere eq.getAnOperand() instanceof BooleanLiteral\nselect eq","complexity":"basic"},{"id":"field-declared-volatile","name":"Field declared volatile","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds fields with a 'volatile' modifier","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Field f\nwhere f.isVolatile()\nselect f","complexity":"basic"},{"id":"find-references-link","name":"Find references link","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Element e, Element def, string kind\nwhere\n  def = definitionOf(e, kind) and def.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"if-statement-with-empty-then-branch","name":"If statements with empty then branch","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds 'if' statements where the 'then' branch is an empty block statement","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom IfStmt i\nwhere i.getThen().(BlockStmt).getNumStmt() = 0\nselect i","complexity":"basic"},{"id":"integer-literal","name":"Integer Literal","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds places where we use the integer literal `0`","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom IntegerLiteral literal\nwhere literal.getIntValue() = 0\nselect literal","complexity":"basic"},{"id":"jump-to-definition-links","name":"Jump-to-definition links","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import definitions\nexternal string selectedSourceFile();\nfrom Element e, Element def, string kind\nwhere def = definitionOf(e, kind) and e.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"method-with-many-parameters","name":"Method with many parameters","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds methods with more than ten parameters","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method m\nwhere m.getNumberOfParameters() > 10\nselect m","complexity":"basic"},{"id":"method-without-return-type","name":"Method without return type","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds methods whose return type is 'void'","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method m\nwhere m.getReturnType() instanceof VoidType\nselect m","complexity":"basic"},{"id":"mutual-recursion","name":"Mutual recursion","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds pairs of methods that call each other","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method m, Method n\nwhere\n  exists(MethodAccess ma | ma.getCaller() = m and ma.getCallee() = n) and\n  exists(MethodAccess ma | ma.getCaller() = n and ma.getCallee() = m) and\n  m != n\nselect m, n","complexity":"basic"},{"id":"native-methods","name":"Native Methods","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds methods that are native (Java Native Interface)","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method m\nwhere m.isNative()\nselect m","complexity":"basic"},{"id":"override-of-method","name":"Override of method","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds methods that override com.example.Class.baseMethod","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method override, Method base\nwhere\n  base.hasName('baseMethod') and\n  base.getDeclaringType().hasQualifiedName('com.example', 'Class') and\n  override.overrides+(base)\nselect override","complexity":"basic"},{"id":"print-source-ast","name":"Print source code AST","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\nimport semmle.code.java.PrintAst\nimport definitions\n\n/**\n * The source file to generate an AST from.\n */\nexternal string selectedSourceFile();\n\nclass PrintAstConfigurationOverride extends PrintAstConfiguration {\n  /**\n   * Holds if the location matches the selected file in the VS Code extension and\n   * the element is `fromSource`.\n   */\n  override predicate shouldPrint(Element e, Location l) {\n    super.shouldPrint(e, l) and\n    l.getFile() = getFileBySourceArchiveName(selectedSourceFile())\n  }\n}","complexity":"basic"},{"id":"qualified-this-access","name":"Qualified 'this' access","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds 'this' accesses that are qualified by a type name","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom ThisAccess t\nwhere exists(t.getQualifier())\nselect t","complexity":"basic"},{"id":"read-of-field","name":"Read of field","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds reads of aField (defined on com.example.Class)","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Field f, FieldRead read\nwhere\n  f.hasName('aField') and\n  f.getDeclaringType().hasQualifiedName('com.example', 'Class') and\n  f = read.getField()\nselect read","complexity":"basic"},{"id":"return-statements","name":"Return statements","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds return statements that return 'null'","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom ReturnStmt r\nwhere r.getResult() instanceof NullLiteral\nselect r","complexity":"basic"},{"id":"singleton-blocks","name":"Singleton blocks","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds block statements containing a single statement","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom BlockStmt b\nwhere b.getNumStmt() = 1\nselect b","complexity":"basic"},{"id":"switch-statement-case-missing","name":"Switch statement case missing","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds switch statements with a missing enum constant case and no default case","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom SwitchStmt switch, EnumType enum, EnumConstant missing\nwhere\n  switch.getExpr().getType() = enum and\n  missing.getDeclaringType() = enum and\n  not switch.getAConstCase().getValue() = missing.getAnAccess() and\n  not exists(switch.getDefaultCase())\nselect switch","complexity":"basic"},{"id":"synchronized-methods","name":"Synchronized Methods","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds methods that are synchronized","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method m\nwhere m.isSynchronized()\nselect m","complexity":"basic"},{"id":"throw-exception-of-type","name":"Throw exception of type","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds places where we throw com.example.AnException or one of its subtypes","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom ThrowStmt throw\nwhere throw.getThrownExceptionType().getAnAncestor().hasQualifiedName('com.example', 'AnException')\nselect throw, 'Don't throw com.example.AnException'","complexity":"basic"},{"id":"try-finally-statement","name":"Try-finally statements","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds try-finally statements without a catch clause","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom TryStmt t\nwhere\n  exists(t.getFinally()) and\n  not exists(t.getACatchClause())\nselect t","complexity":"basic"},{"id":"unused-local-variable","name":"Unused local variable","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds local variables that are not accessed","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom LocalVariableDecl v\nwhere not exists(v.getAnAccess())\nselect v","complexity":"basic"},{"id":"unused-parameter","name":"Unused parameter","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds parameters that are not accessed","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Parameter p\nwhere not exists(p.getAnAccess())\nselect p","complexity":"basic"},{"id":"unused-private-method","name":"Unused private method","date":"2022-10-26T17:34:51+07:00","language":"java","description":"Finds private methods that are not accessed","author":"Semmle LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["java","basic","pattern"],"code":"import java\n\nfrom Method m\nwhere\n  m.isPrivate() and\n  not exists(m.getAReference()) and\n  not m instanceof InitializerMethod\nselect m","complexity":"basic"},{"id":"call-to-function","name":"Call to function","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds function calls of the form `eval(...)`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\nfrom CallExpr c\nwhere c.getCalleeName() = \"eval\"\nselect c","complexity":"basic"},{"id":"callbacks","name":"Callbacks","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds functions that are passed as arguments to other functions","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom InvokeExpr invk, DataFlow::FunctionNode f\nwhere f.flowsToExpr(invk.getAnArgument())\nselect invk, f","complexity":"basic"},{"id":"class-with-implicit-default-constructor","name":"Class with implicit default constructor","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds classes that do not declare an explicit constructor","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom ClassDefinition c\nwhere c.getConstructor().isSynthetic()\nselect c","complexity":"basic"},{"id":"constant-property-name-in-bracket-property-access","name":"Constant property name in `[]` property access","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds property accesses using the square bracket notation where the property name is a constant string","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom IndexExpr idx\nwhere idx.getIndex() instanceof StringLiteral\nselect idx","complexity":"basic"},{"id":"declaration-of-variable","name":"Declaration of variable","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds places where we declare a variable called `v`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom VarDecl d\nwhere d.getVariable().getName() = 'v'\nselect d","complexity":"basic"},{"id":"decoding-after-sanitization-generalized","name":"Decoding after sanitization (generalized)","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Tracks the return value of an HTML sanitizer into an escape-sequence decoder, indicating an ineffective sanitization attempt.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * A call to a function that may introduce HTML meta-characters by\n * replacing `%3C` or `\u003C` with `<`.\n */\nclass DecodingCall extends CallNode {\n  string kind;\n  Node input;\n\n  DecodingCall() {\n    getCalleeName().matches(\"decodeURI%\") and\n    input = getArgument(0) and\n    kind = \"URI decoding\"\n    or\n    input = this.(JsonParserCall).getInput() and\n    kind = \"JSON parsing\"\n  }\n\n  /** Gets the decoder kind, to be used in the alert message. */\n  string getKind() { result = kind }\n\n  /** Gets the input being decoded. */\n  Node getInput() { result = input }\n}\n\nclass DecodingAfterSanitization extends TaintTracking::Configuration {\n  DecodingAfterSanitization() { this = \"DecodingAfterSanitization\" }\n\n  override predicate isSource(Node node) { node instanceof HtmlSanitizerCall }\n\n  override predicate isSink(Node node) { node = any(DecodingCall c).getInput() }\n}\n\nfrom DecodingAfterSanitization cfg, PathNode source, PathNode sink, DecodingCall decoder\nwhere\n  cfg.hasFlowPath(source, sink) and\n  decoder.getInput() = sink.getNode()\nselect sink.getNode(), source, sink, decoder.getKind() + \" invalidates .\", source.getNode(),\n  \"this HTML sanitization performed\"","complexity":"expert"},{"id":"decoding-after-sanitization","name":"Decoding after sanitization","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Tracks the return value of 'escapeHtml' into 'decodeURI', indicating an ineffective sanitization attempt.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\nclass DecodingAfterSanitization extends TaintTracking::Configuration {\n  DecodingAfterSanitization() { this = \"DecodingAfterSanitization\" }\n\n  override predicate isSource(Node node) { node.(CallNode).getCalleeName() = \"escapeHtml\" }\n\n  override predicate isSink(Node node) {\n    exists(CallNode call |\n      call.getCalleeName().matches(\"decodeURI%\") and\n      node = call.getArgument(0)\n    )\n  }\n}\n\nfrom DecodingAfterSanitization cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"URI decoding invalidates the HTML sanitization performed $@.\",\n  source.getNode(), \"here\"","complexity":"expert"},{"id":"default-exports-exporting-a-function","name":"Default exports exporting a function","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds 'default' exports that export a function","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom ExportDefaultDeclaration e\nwhere e.getOperand() instanceof Function\nselect e","complexity":"basic"},{"id":"empty-block","name":"Empty block","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds empty block statements","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom BlockStmt blk\nwhere not exists(blk.getAStmt())\nselect blk","complexity":"basic"},{"id":"empty-yield","name":"Empty yield","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds yield expressions without an operand","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom YieldExpr yield\nwhere not exists(yield.getOperand())\nselect yield","complexity":"basic"},{"id":"equalities-as-expression-statement","name":"Equalities as expression statement","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds `==` equality expressions that form an expression statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom ExprStmt e\nwhere e.getExpr() instanceof EqExpr\nselect e","complexity":"basic"},{"id":"extension-of-standard-query-stored-xss-with-trackednode","name":"Extension of standard query: Stored XSS (with TrackedNode)","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Extends the standard Stored XSS query with an additional source, using TrackedNode to track MySQL connections globally.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport semmle.javascript.security.dataflow.StoredXssQuery\nimport DataFlow::PathGraph\n\n/**\n * Gets an instance of `mysql.createConnection()`, tracked globally.\n */\n DataFlow::SourceNode mysqlConnection(DataFlow::TypeTracker t) {\n  t.start() and\n  result = DataFlow::moduleImport(\"mysql\").getAMemberCall(\"createConnection\")\n  or\n  exists(DataFlow::TypeTracker t2 | result = mysqlConnection(t2).track(t2, t))\n}\n\n/**\n * Gets an instance of `mysql.createConnection()`, tracked globally.\n */\nDataFlow::SourceNode mysqlConnection() { result = mysqlConnection(DataFlow::TypeTracker::end()) }\n\n/**\n * The data returned from a MySQL query.\n *\n * For example:\n * ```\n * let mysql = require('mysql');\n *\n * getData(mysql.createConnection());\n *\n * function getData(c) {\n *   c.query(..., (e, data) => { ... });\n * }\n * ```\n */\nclass MysqlSource extends Source {\n  MysqlSource() { this = mysqlConnection().getAMethodCall(\"query\").getCallback(1).getParameter(1) }\n}\n\nfrom Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Stored XSS from $@.\", source.getNode(), \"database value.\"","complexity":"expert"},{"id":"extension-of-standard-query-stored-xss","name":"Extension of standard query: Stored XSS","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Extends the standard Stored XSS query with an additional source.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport semmle.javascript.security.dataflow.StoredXssQuery\nimport DataFlow::PathGraph\n\n/**\n * The data returned from a MySQL query, such as the `data` parameter in this example:\n * ```\n * let mysql = require('mysql');\n * let connection = mysql.createConnection();\n *\n * connection.query(..., (e, data) => { ... });\n * ```\n */\nclass MysqlSource extends Source {\n  MysqlSource() {\n    this =\n      DataFlow::moduleImport(\"mysql\")\n          .getAMemberCall(\"createConnection\")\n          .getAMethodCall(\"query\")\n          .getCallback(1)\n          .getParameter(1)\n  }\n}\n\nfrom Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Stored XSS from $@.\", source.getNode(), \"database value.\"","complexity":"expert"},{"id":"file-with-given-name","name":"File with given name","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds files called `index.js`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom File f\nwhere f.getBaseName() = 'index.js'\nselect f","complexity":"basic"},{"id":"find-class","name":"Find class","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds classes called 'File'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom ClassDefinition cd\nwhere cd.getName() = 'File'\nselect cd","complexity":"basic"},{"id":"find-reference-link","name":"Find-references links","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Locatable e, AstNode def, string kind\nwhere\n  def = definitionOf(e, kind) and def.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"functions-with-many-parameters","name":"Functions with many parameters","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds functions with more than ten parameters","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom Function f\nwhere f.getNumParameter() > 10\nselect f","complexity":"basic"},{"id":"functions-without-return-statements","name":"Functions without return statements","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds functions that do not contain a return statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom Function f\nwhere\n  exists(f.getABodyStmt()) and\n  not exists(ReturnStmt r | r.getContainer() = f)\nselect f","complexity":"basic"},{"id":"generator-functions","name":"Generator functions (function* foo(...))","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds generator functions","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom Function f\nwhere f.isGenerator()\nselect f","complexity":"basic"},{"id":"idor-through-request-to-backend-service","name":"IDOR through request to backend service","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds cases where the 'userId' field in a request to another service is an arbitrary user-controlled value, indicating lack of authentication.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * A taint-tracking configuration that tracks user-controlled values into a 'userId' property sent to a backend service.\n */\nclass IdorTaint extends TaintTracking::Configuration {\n  IdorTaint() { this = \"IdorTaint\" }\n\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n\n  override predicate isSink(Node node) { exists(ClientRequest req | node = req.getADataNode()) }\n\n  override predicate isAdditionalTaintStep(Node pred, Node succ) {\n    // Step from x -> { userId: x }\n    succ.(SourceNode).getAPropertyWrite(\"userId\").getRhs() = pred\n  }\n\n  override predicate isSanitizerGuard(TaintTracking::SanitizerGuardNode node) {\n    // After a check like `if (userId === session.user.id)`, the userId is considered safe.\n    node instanceof EqualityGuard\n  }\n}\n\n/**\n * A sanitizer for values that have successfully been compared to another value.\n */\nclass EqualityGuard extends TaintTracking::SanitizerGuardNode, ValueNode {\n  override EqualityTest astNode;\n\n  override predicate sanitizes(boolean outcome, Expr e) {\n    e = astNode.getAnOperand() and\n    outcome = astNode.getPolarity()\n  }\n}\n\nfrom IdorTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Unauthenticated user ID from $@.\", source.getNode(), \"here\"","complexity":"expert"},{"id":"if-statement-with-empty-then-branch","name":"If statements with empty then branch","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds 'if' statements where the 'then' branch is an empty block statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom IfStmt i\nwhere i.getThen().(BlockStmt).getNumStmt() = 0\nselect i","complexity":"basic"},{"id":"immediately-invoke-function-expression","name":"Immediately invoked function expressions","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds calls of the form `(function(...) { ... })(...)`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom CallExpr c\nwhere c.getCallee().stripParens() instanceof FunctionExpr\nselect c","complexity":"basic"},{"id":"imports-from-react","name":"Imports from 'react'","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds import statements that import from module 'react'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom ImportDeclaration id\nwhere id.getImportedPath().getValue() = 'react'\nselect id","complexity":"basic"},{"id":"information-diclose-through-postmessage","name":"Information disclosure through postMessage","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Tracks values from an 'authKey' property into a postMessage call with unrestricted origin, indicating a leak of sensitive information.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * A dataflow configuration that tracks authentication tokens (\"authKey\")\n * to a postMessage call with unrestricted target origin.\n *\n * For example:\n * ```\n * win.postMessage(JSON.stringify({\n *  action: 'pause',\n *  auth: {\n *    key: window.state.authKey\n *  }\n * }), '*');\n * ```\n */\nclass AuthKeyTracking extends DataFlow::Configuration {\n  AuthKeyTracking() { this = \"AuthKeyTracking\" }\n\n  override predicate isSource(Node node) { node.(PropRead).getPropertyName() = \"authKey\" }\n\n  override predicate isSink(Node node) {\n    exists(MethodCallNode call |\n      call.getMethodName() = \"postMessage\" and\n      call.getArgument(1).getStringValue() = \"*\" and // no restriction on target origin\n      call.getArgument(0) = node\n    )\n  }\n\n  override predicate isAdditionalFlowStep(Node pred, Node succ) {\n    // Step into objects: x -> { f: x }\n    succ.(SourceNode).getAPropertyWrite().getRhs() = pred\n    or\n    // Step through JSON serialization: x -> JSON.stringify(x)\n    // Note: TaintTracking::Configuration includes this step by default, but not DataFlow::Configuration\n    exists(CallNode call |\n      call = globalVarRef(\"JSON\").getAMethodCall(\"stringify\") and\n      pred = call.getArgument(0) and\n      succ = call\n    )\n  }\n}\n\nfrom AuthKeyTracking cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Message leaks the authKey from $@.\", source.getNode(), \"here\"","complexity":"expert"},{"id":"jsx-attribute","name":"JSX attributes","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds JSX attributes named `dangerouslySetInnerHTML`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom JsxAttribute a\nwhere a.getName() = 'dangerouslySetInnerHTML'\nselect a","complexity":"basic"},{"id":"jump-to-definition-link","name":"Jump-to-definition links","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Locatable e, AstNode def, string kind\nwhere def = definitionOf(e, kind) and e.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"method-calls","name":"Method calls","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds calls of the form `this.isMounted(...)`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom MethodCallExpr c\nwhere\n  c.getReceiver() instanceof ThisExpr and\n  c.getMethodName() = 'isMounted'\nselect c","complexity":"basic"},{"id":"method-search","name":"Method search","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds methods named 'render'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom MethodDefinition m\nwhere m.getName() = 'render'\nselect m","complexity":"basic"},{"id":"named-function-expression","name":"Named function expression","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds function expressions that have a name","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom FunctionExpr fn\nwhere exists(fn.getName())\nselect fn","complexity":"basic"},{"id":"new-expression","name":"New expressions","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds new expressions of the form `new RegExp(...)`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom NewExpr new\nwhere new.getCalleeName() = 'RegExp'\nselect new","complexity":"basic"},{"id":"parameter-search-by-name","name":"Parameters searched by name","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds parameters called 'arguments'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom SimpleParameter p\nwhere p.getName() = 'arguments'\nselect p","complexity":"basic"},{"id":"print-sourcecode-ast","name":"Print source code AST","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\nimport semmle.javascript.PrintAst\nimport definitions\n\n/**\n * Gets the source file to generate an AST from.\n */\nexternal string selectedSourceFile();\n\nclass PrintAstConfigurationOverride extends PrintAstConfiguration {\n  /**\n   * Holds if the location matches the selected file in the VS Code extension and\n   * the element is not a synthetic constructor.\n   */\n  override predicate shouldPrint(Locatable e, Location l) {\n    super.shouldPrint(e, l) and\n    l.getFile() = getFileBySourceArchiveName(selectedSourceFile())\n  }\n}","complexity":"basic"},{"id":"property-access","name":"Property accesses","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds property accesses of the form `x.innerHTML`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom PropAccess p\nwhere p.getPropertyName() = 'innerHTML'\nselect p","complexity":"basic"},{"id":"references-of-a-variable-by-name","name":"References of a variable by name","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds places where we reference a variable called `var`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom VarRef ref\nwhere ref.getVariable().getName() = 'var'\nselect ref","complexity":"basic"},{"id":"single-quote-string-literal","name":"Single-quoted string literals","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds string literals using single quotes","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom StringLiteral s\nwhere s.getRawValue().charAt(0) = \"'\"\nselect s","complexity":"basic"},{"id":"singleton-block","name":"Singleton blocks","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds block statements containing a single statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascrip\n\nfrom BlockStmt b\nwhere b.getNumStmt() = 1\nselect b","complexity":"basic"},{"id":"tagged-template","name":"Tagged templates","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds tagged template expressions","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom TaggedTemplateExpr e\nselect e.getTag(), e.getTemplate()","complexity":"basic"},{"id":"taint-tracking-to-evals-call-with-path-visualization","name":"Taint-tracking to 'eval' calls (with path visualization)","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Tracks user-controlled values into 'eval' calls (special case of js/code-injection), and generates a visualizable path from the source to the sink.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\nclass EvalTaint extends TaintTracking::Configuration {\n  EvalTaint() { this = \"EvalTaint\" }\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n  override predicate isSink(Node node) { node = globalVarRef(\"eval\").getACall().getArgument(0) }\n}\nfrom EvalTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Eval with user-controlled input from $@.\", source.getNode(),\n  \"here\"","complexity":"expert"},{"id":"taint-tracking-to-evals","name":"Taint-tracking to 'eval' calls","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Tracks user-controlled values into 'eval' calls (special case of js/code-injection).","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","advanced"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\nclass EvalTaint extends TaintTracking::Configuration {\n  EvalTaint() { this = \"EvalTaint\" }\n\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n\n  override predicate isSink(Node node) { node = globalVarRef(\"eval\").getACall().getArgument(0) }\n}\n\nfrom EvalTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Eval with user-controlled input from $@.\", source.getNode(),\n  \"here\"","complexity":"advanced"},{"id":"template-injection","name":"Template injection","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Tracks user-controlled values to an unescaped lodash template placeholder.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * Gets the name of an unescaped placeholder in a lodash template.\n *\n * For example, the string `\"<h1><%= title %></h1>\"` contains the placeholder \"title\".\n */\nbindingset[s]\nstring getAPlaceholderInString(string s) {\n  result = s.regexpCapture(\".*<%=\\s*([a-zA-Z0-9_]+)\\s*%>.*\", 1)\n}\n\nclass TemplateInjection extends TaintTracking::Configuration {\n  TemplateInjection() { this = \"TemplateInjection\" }\n\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n\n  override predicate isSink(Node node) {\n    exists(CallNode call, string placeholder |\n      call = LodashUnderscore::member(\"template\").getACall() and\n      placeholder = getAPlaceholderInString(call.getArgument(0).getStringValue()) and\n      node = call.getOptionArgument(1, placeholder)\n    )\n  }\n}\n\nfrom TemplateInjection cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink,\n  \"User-controlled value from $@ occurs unescaped in a lodash template.\", source.getNode(), \"here.\"","complexity":"expert"},{"id":"test-even-number-expression","name":"Tests for even numbers","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds expressions of the form `e % 2 === 0`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","expert"],"categories":[],"code":"import javascript\n\nfrom StrictEqExpr eq, ModExpr mod, NumberLiteral zero, NumberLiteral two\nwhere\n  two.getValue() = \"2\" and\n  mod.getRightOperand() = two and\n  zero.getValue() = \"0\" and\n  eq.hasOperands(mod, two)\nselect eq","complexity":"basic"},{"id":"todo-comments","name":"TODO comments","date":"2022-10-20T13:10:11+07:00","language":"javascript","description":"Finds comments containing the word TODO","author":"LGTM","authorURL":"https://lgtm.com/query/lang:javascript/","tags":["pattern","javascript","basic"],"categories":[],"code":"import javascript\n\nfrom Comment c\nwhere c.getText().regexpMatch(\"(?si).*\\bTODO\\b.*\")\nselect c, \"TODO comments indicate that the code may not be complete.\"","complexity":"basic"},{"id":"builtin-objects","name":"Builtin objects","date":"2022-12-1T09:55:34+07:00","language":"python","description":"Finds expressions that refer to an object in the builtins module (like int or None).","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\nfrom Expr e, string name\nwhere e.pointsTo(Value::named(name)) and not name.charAt(_) = '.'\nselect e","complexity":"basic"},{"id":"call-to-method","name":"Call to method","date":"2022-12-1T16:34:34+07:00","language":"python","description":"Finds calls to MyClass.methodName","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\nfrom AstNode call, PythonFunctionValue method\nwhere\n  method.getQualifiedName() = 'MyClass.methodName' and\n  method.getACall().getNode() = call\nselect call","complexity":"basic"},{"id":"calls-to-function","name":"Calls to function","date":"2022-12-1T22:45:22+07:00","language":"python","description":"Finds calls to any function named 'len'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Value len, CallNode call\nwhere len.getName() = 'len' and len.getACall() = call\nselect call","complexity":"basic"},{"id":"class-subclasses","name":"Class subclasses","date":"2022-12-1T23:54:55+07:00","language":"python","description":"Finds classes that subclass MyClass","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom ClassObject sub, ClassObject base\nwhere\n  base.getName() = 'MyClass' and\n  sub.getABaseType() = base\nselect sub","complexity":"basic"},{"id":"conditional-expressions","name":"Conditional Expressions","date":"2022-10-21T01:12:34+07:00","language":"javascript","description":"Finds conditional expressions of the form '... if ... else ...' where the classes of the sub-expressions differ","author":"LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["python","basic","pattern"],"categories":[],"code":"import python\nfrom IfExp e, ClassObject cls1, ClassObject cls2\nwhere\n e.getBody().refersTo(_, cls1, ) and\n e.getOrelse().refersTo(, cls2, _) and\n cls1 != cls2\nselect e","complexity":"basic"},{"id":"create-new-object","name":"Create new object","date":"2022-12-2T00:00:20+07:00","language":"python","description":"Finds places where we create a new instanceof `MyClass`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Call new, ClassValue cls\nwhere\n  cls.getName() = 'MyClass' and\n  new.getFunc().pointsTo(cls)\nselect new","complexity":"basic"},{"id":"elif-statement","name":"Elif statement","date":"2022-12-2T00:07:00+07:00","language":"python","description":"Finds `elif` sub-statements within `if` statements","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom If i\nwhere i.isElif()\nselect i","complexity":"basic"},{"id":"empty-blocks","name":"Empty blocks","date":"2022-12-2T00:28:00+07:00","language":"python","description":"Finds the first statement in a block consisting of nothing but Pass statements","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom StmtList blk\nwhere not exists(Stmt s | not s instanceof Pass)\nselect blk.getItem(0)","complexity":"basic"},{"id":"equalities-as-expression-statements","name":"Equalities as expression statements","date":"2022-12-2T00:32:00+07:00","language":"python","description":"Finds `==` equality expressions that form a statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom ExprStmt e, Compare eq\nwhere e.getValue() = eq and eq.getOp(0) instanceof Eq\nselect e","complexity":"basic"},{"id":"equality-test-on-boolean","name":"Equality test on boolean","date":"2022-12-2T00:32:00+07:00","language":"python","description":"Finds tests like `==true`, `==false`, `'!=true`, `is false`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Compare eq\nwhere eq.getAComparator() instanceof BooleanLiteral\nselect eq","complexity":"basic"},{"id":"file-with-given-name","name":"File with given name","date":"2022-12-2T02:36:00+07:00","language":"python","description":"Finds files called `spam.py`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom File f\nwhere f.getShortName() = 'spam.py'\nselect f","complexity":"basic"},{"id":"find-prints","name":"Find prints","date":"2022-12-2T03:47:00+07:00","language":"python","description":"Find print statements or calls to the builtin function 'print'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom AstNode print\nwhere\n  /* Python 2 without `from __future__ import print_function` */\n  print instanceof Print\n  or\n  /* Python 3 or with `from __future__ import print_function` */\n  print.(Call).getFunc().pointsTo(Value::named('print'))\nselect print","complexity":"basic"},{"id":"find-references-links","name":"Find-references links","date":"2022-12-2T04:41:00+07:00","language":"python","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\nimport analysis.DefinitionTracking\n\nexternal string selectedSourceFile();\n\nfrom NiceLocationExpr use, Definition defn, string kind\nwhere\n  defn = definitionOf(use, kind) and\n  defn.getLocation().getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect use, defn, kind","complexity":"basic"},{"id":"functions-with-many-parameters","name":"Functions with many parameters","date":"2022-12-2T03:54:00+07:00","language":"python","description":"Finds functions with more than 7 parameters","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Function fcn\nwhere count(fcn.getAnArg()) > 7\nselect fcn","complexity":"basic"},{"id":"generator-functions","name":"Generator functions","date":"2022-12-2T03:55:00+07:00","language":"python","description":"Finds generator functions","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Function f\nwhere f.isGenerator()\nselect f","complexity":"basic"},{"id":"handle-exception-of-given-class","name":"Handle exception of given class","date":"2022-12-2T04:01:00+07:00","language":"python","description":"Finds places where we handle MyExceptionClass exceptions","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom ExceptStmt ex, ClassValue cls\nwhere\n  cls.getName() = 'MyExceptionClass' and\n  ex.getType().pointsTo(cls)\nselect ex","complexity":"basic"},{"id":"if-statements-with-empty-then-branch","name":"If statements with empty then branch","date":"2022-12-2T04:01:00+07:00","language":"python","description":"Finds 'if' statements where the 'then' branch consists entirely of Pass statements","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom If i\nwhere\n  not exists(Stmt s |\n    i.getStmt(_) = s and\n    not s instanceof Pass\n  )\nselect i","complexity":"basic"},{"id":"integer-literal","name":"Integer literal","date":"2022-12-2T04:06:00+07:00","language":"python","description":"Finds places where we use the integer literal `0`","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom IntegerLiteral literal\nwhere literal.getValue() = 0\nselect literal","complexity":"basic"},{"id":"jump-to-definition-links","name":"Jump-to-definition links","date":"2022-12-2T04:43:00+07:00","language":"python","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\nimport analysis.DefinitionTracking\n\nexternal string selectedSourceFile();\n\nfrom NiceLocationExpr use, Definition defn, string kind, string f\nwhere\n  defn = definitionOf(use, kind) and\n  use.hasLocationInfo(f, _, _, _, _) and\n  getFileBySourceArchiveName(selectedSourceFile()).getAbsolutePath() = f\nselect use, defn, kind","complexity":"basic"},{"id":"mutual-recursion","name":"Mutual recursion","date":"2022-12-2T04:08:00+07:00","language":"python","description":"Finds pairs of functions that call each other","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom FunctionObject m, FunctionObject n\nwhere m != n and m.getACallee() = n and n.getACallee() = m\nselect m, n","complexity":"basic"},{"id":"override-of-method","name":"Override of method","date":"2022-12-2T04:12:00+07:00","language":"python","description":"Finds methods that override MyClass.methodName","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom FunctionObject override, FunctionObject base\nwhere\n  base.getQualifiedName() = 'MyClass.methodName' and\n  override.overrides(base)\nselect override","complexity":"basic"},{"id":"print-ast","name":"Print AST","date":"2022-12-2T04:39:00+07:00","language":"python","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\nimport semmle.python.PrintAst\nimport analysis.DefinitionTracking\n\n/**\n * Gets the source file that will be used to generate the AST.\n */\nexternal string selectedSourceFile();\n\nclass PrintAstConfigurationOverride extends PrintAstConfiguration {\n  /**\n   * Holds if the location matches the selected file in the VS Code extension and\n   * the element is not a synthetic constructor.\n   */\n  override predicate shouldPrint(AstNode e, Location l) {\n    super.shouldPrint(e, l) and\n    l.getFile() = getFileBySourceArchiveName(selectedSourceFile())\n  }\n}","complexity":"basic"},{"id":"private-access","name":"Private access","date":"2022-12-2T04:13:00+07:00","language":"python","description":"Find accesses to 'private' attributes (those starting with an underscore)","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\npredicate is_private(Attribute a) {\n  a.getName().matches('\\\\_%') and\n  not a.getName().matches('\\\\_\\\\_%\\\\_\\\\_')\n}\n\nfrom Attribute access\nwhere\n  is_private(access) and\n  not access.getObject().(Name).getId() = 'self'\nselect access","complexity":"basic"},{"id":"raise-exception-of-a-class","name":"Raise exception of a class","date":"2022-12-2T04:16:00+07:00","language":"python","description":"Finds places where we raise AnException or one of its subclasses","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Raise raise, ClassValue ex\nwhere\n  ex.getName() = 'AnException' and\n  raise.getException().pointsTo(ex.getASuperType())\nselect raise, 'Don't raise instances of 'AnException''","complexity":"basic"},{"id":"raw-string-literals","name":"Raw string literals","date":"2022-12-2T04:20:00+07:00","language":"python","description":"Finds string literals with an 'r' prefix","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom StrConst s\nwhere s.getPrefix().matches('%r%')\nselect s","complexity":"basic"},{"id":"recursion","name":"Recursion","date":"2022-12-2T04:22:00+07:00","language":"python","description":"Finds functions that call themselves","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom PythonFunctionValue f\nwhere f.getACall().getScope() = f.getScope()\nselect f","complexity":"basic"},{"id":"single-quoted-string-literals","name":"Single-quoted string literals","date":"2022-12-2T04:25:00+07:00","language":"python","description":"Finds string literals using single quotes","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom StrConst s\nwhere s.getPrefix().charAt(_) = \"'\"\nselect s","complexity":"basic"},{"id":"store-none-to-collection","name":"Store None to collection","date":"2022-12-2T04:27:00+07:00","language":"python","description":"Finds places where `None` is used as an index when storing to a collection","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom SubscriptNode store\nwhere\n  store.isStore() and\n  store.getIndex().pointsTo(Value::named('None'))\nselect store","complexity":"basic"},{"id":"string-conversion-expressions","name":"String conversion expressions","date":"2022-12-2T04:30:00+07:00","language":"python","description":"Finds `String conversions` expressions (expressions enclosed in backticks), which are removed in Python 3","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Repr r\nselect r","complexity":"basic"},{"id":"todo-comments","name":"TODO comments","date":"2022-12-2T04:33:00+07:00","language":"python","description":"Finds comments containing the word 'TODO'","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Comment c\nwhere c.getText().regexpMatch('(?si).*\\\\bTODO\\\\b.*')\nselect c","complexity":"basic"},{"id":"try-finally-statements","name":"Try-finally statements","date":"2022-12-2T04:35:00+07:00","language":"python","description":"Finds try-finally statements without an exception handler","author":"LGTM","authorURL":"https://lgtm.com/query/lang:python/","tags":["python","basic","pattern"],"categories":[],"code":"import python\n\nfrom Try t\nwhere\n  exists(t.getFinalbody()) and\n  not exists(t.getAHandler())\nselect t","complexity":"basic"},{"id":"find-reference-links","name":"Find-references links","date":"2022-10-21T01:12:34+07:00","language":"ruby","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["ruby","basic","pattern"],"categories":[],"code":"import codeql.IDEContextual\nimport codeql.ruby.AST\n\nexternal string selectedSourceFile();\n\nfrom AstNode e, Variable def, string kind\nwhere\n  e = def.getAnAccess() and\n  kind = \"local variable\" and\n  def.getLocation().getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{"id":"if-statements-with-empty-then-branch","name":"If statements with empty then branch","date":"2022-10-21T01:12:34+07:00","language":"ruby","description":"Finds 'if' statements where the 'then' branch is an empty block statement","author":"LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["ruby","basic","pattern"],"categories":[],"code":"import codeql.ruby.AST\n\nfrom IfExpr i\nwhere not exists(i.getThen().getAChild())\nselect i","complexity":"basic"},{"id":"jump-to-definition-links","name":"Jump-to-definition links","date":"2022-10-21T01:12:34+07:00","language":"ruby","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","author":"LGTM","authorURL":"https://lgtm.com/query/lang:java/","tags":["ruby","basic","pattern"],"categories":[],"code":"import codeql.IDEContextual\nimport codeql.ruby.AST\n\nexternal string selectedSourceFile();\n\nfrom AstNode e, Variable def, string kind\nwhere\n  e = def.getAnAccess() and\n  kind = \"local variable\" and\n  e.getLocation().getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic"},{}]
[{"code":"import javascript\nfrom CallExpr c\nwhere c.getCalleeName() = \"eval\"\nselect c","complexity":"basic","description":"Finds function calls of the form eval(...)","language":"javascript","name":"Call to Eval","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/call-to-eval/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\nclass EvalTaint extends TaintTracking::Configuration {\n  EvalTaint() { this = \"EvalTaint\" }\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n  override predicate isSink(Node node) { node = globalVarRef(\"eval\").getACall().getArgument(0) }\n}\nfrom EvalTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Eval with user-controlled input from $@.\", source.getNode(),\n  \"here\"","complexity":"expert","description":"Tracks user-controlled values into 'eval' calls (special case of js/code-injection), and generates a visualizable path from the source to the sink.","language":"javascript","name":"Taint-tracking to 'eval' calls (with path visualization)","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/taint-tracking-to-evals-call-with-path-visualization/"}]
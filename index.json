[{"code":"import javascript\nfrom CallExpr c\nwhere c.getCalleeName() = \"eval\"\nselect c","complexity":"basic","description":"Finds function calls of the form `eval(...)`","language":"javascript","name":"Call to function","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/call-to-function/"},{"code":"import javascript\n\nfrom InvokeExpr invk, DataFlow::FunctionNode f\nwhere f.flowsToExpr(invk.getAnArgument())\nselect invk, f","complexity":"basic","description":"Finds functions that are passed as arguments to other functions","language":"javascript","name":"Callbacks","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/callbacks/"},{"code":"import javascript\n\nfrom ClassDefinition c\nwhere c.getConstructor().isSynthetic()\nselect c","complexity":"basic","description":"Finds classes that do not declare an explicit constructor","language":"javascript","name":"Class with implicit default constructor","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/class-with-implicit-default-construtor/"},{"code":"import javascript\n\nfrom IndexExpr idx\nwhere idx.getIndex() instanceof StringLiteral\nselect idx","complexity":"basic","description":"Finds property accesses using the square bracket notation where the property name is a constant string","language":"javascript","name":"Constant property name in `[]` property access","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/constant-property-name-in-bracket-property-access/"},{"code":"import javascript\n\nfrom VarDecl d\nwhere d.getVariable().getName() = 'v'\nselect d","complexity":"basic","description":"Finds places where we declare a variable called `v`","language":"javascript","name":"Declaration of variable","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/declaration-of-variable/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * A call to a function that may introduce HTML meta-characters by\n * replacing `%3C` or `\u003c` with `\u003c`.\n */\nclass DecodingCall extends CallNode {\n  string kind;\n  Node input;\n\n  DecodingCall() {\n    getCalleeName().matches(\"decodeURI%\") and\n    input = getArgument(0) and\n    kind = \"URI decoding\"\n    or\n    input = this.(JsonParserCall).getInput() and\n    kind = \"JSON parsing\"\n  }\n\n  /** Gets the decoder kind, to be used in the alert message. */\n  string getKind() { result = kind }\n\n  /** Gets the input being decoded. */\n  Node getInput() { result = input }\n}\n\nclass DecodingAfterSanitization extends TaintTracking::Configuration {\n  DecodingAfterSanitization() { this = \"DecodingAfterSanitization\" }\n\n  override predicate isSource(Node node) { node instanceof HtmlSanitizerCall }\n\n  override predicate isSink(Node node) { node = any(DecodingCall c).getInput() }\n}\n\nfrom DecodingAfterSanitization cfg, PathNode source, PathNode sink, DecodingCall decoder\nwhere\n  cfg.hasFlowPath(source, sink) and\n  decoder.getInput() = sink.getNode()\nselect sink.getNode(), source, sink, decoder.getKind() + \" invalidates .\", source.getNode(),\n  \"this HTML sanitization performed\"","complexity":"expert","description":"Tracks the return value of an HTML sanitizer into an escape-sequence decoder, indicating an ineffective sanitization attempt.","language":"javascript","name":"Decoding after sanitization (generalized)","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/decoding-after-sanitization-generalized/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\nclass DecodingAfterSanitization extends TaintTracking::Configuration {\n  DecodingAfterSanitization() { this = \"DecodingAfterSanitization\" }\n\n  override predicate isSource(Node node) { node.(CallNode).getCalleeName() = \"escapeHtml\" }\n\n  override predicate isSink(Node node) {\n    exists(CallNode call |\n      call.getCalleeName().matches(\"decodeURI%\") and\n      node = call.getArgument(0)\n    )\n  }\n}\n\nfrom DecodingAfterSanitization cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"URI decoding invalidates the HTML sanitization performed $@.\",\n  source.getNode(), \"here\"","complexity":"expert","description":"Tracks the return value of 'escapeHtml' into 'decodeURI', indicating an ineffective sanitization attempt.","language":"javascript","name":"Decoding after sanitization","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/decoding-after-sanitization/"},{"code":"import javascript\n\nfrom ExportDefaultDeclaration e\nwhere e.getOperand() instanceof Function\nselect e","complexity":"basic","description":"Finds 'default' exports that export a function","language":"javascript","name":"Default exports exporting a function","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/default-export-exporting-a-function/"},{"code":"import javascript\n\nfrom BlockStmt blk\nwhere not exists(blk.getAStmt())\nselect blk","complexity":"basic","description":"Finds empty block statements","language":"javascript","name":"Empty block","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/empty-block/"},{"code":"import javascript\n\nfrom YieldExpr yield\nwhere not exists(yield.getOperand())\nselect yield","complexity":"basic","description":"Finds yield expressions without an operand","language":"javascript","name":"Empty yield","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/empty-yield/"},{"code":"import javascript\n\nfrom ExprStmt e\nwhere e.getExpr() instanceof EqExpr\nselect e","complexity":"basic","description":"Finds `==` equality expressions that form an expression statement","language":"javascript","name":"Equalities as expression statement","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/equalities-as-expression-statement/"},{"code":"import javascript\nimport semmle.javascript.security.dataflow.StoredXssQuery\nimport DataFlow::PathGraph\n\n/**\n * Gets an instance of `mysql.createConnection()`, tracked globally.\n */\n DataFlow::SourceNode mysqlConnection(DataFlow::TypeTracker t) {\n  t.start() and\n  result = DataFlow::moduleImport(\"mysql\").getAMemberCall(\"createConnection\")\n  or\n  exists(DataFlow::TypeTracker t2 | result = mysqlConnection(t2).track(t2, t))\n}\n\n/**\n * Gets an instance of `mysql.createConnection()`, tracked globally.\n */\nDataFlow::SourceNode mysqlConnection() { result = mysqlConnection(DataFlow::TypeTracker::end()) }\n\n/**\n * The data returned from a MySQL query.\n *\n * For example:\n * ```\n * let mysql = require('mysql');\n *\n * getData(mysql.createConnection());\n *\n * function getData(c) {\n *   c.query(..., (e, data) =\u003e { ... });\n * }\n * ```\n */\nclass MysqlSource extends Source {\n  MysqlSource() { this = mysqlConnection().getAMethodCall(\"query\").getCallback(1).getParameter(1) }\n}\n\nfrom Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Stored XSS from $@.\", source.getNode(), \"database value.\"","complexity":"expert","description":"Extends the standard Stored XSS query with an additional source, using TrackedNode to track MySQL connections globally.","language":"javascript","name":"Extension of standard query: Stored XSS (with TrackedNode)","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/extension-of-standard-query-stored-xss-with-trackednode/"},{"code":"import javascript\nimport semmle.javascript.security.dataflow.StoredXssQuery\nimport DataFlow::PathGraph\n\n/**\n * The data returned from a MySQL query, such as the `data` parameter in this example:\n * ```\n * let mysql = require('mysql');\n * let connection = mysql.createConnection();\n *\n * connection.query(..., (e, data) =\u003e { ... });\n * ```\n */\nclass MysqlSource extends Source {\n  MysqlSource() {\n    this =\n      DataFlow::moduleImport(\"mysql\")\n          .getAMemberCall(\"createConnection\")\n          .getAMethodCall(\"query\")\n          .getCallback(1)\n          .getParameter(1)\n  }\n}\n\nfrom Configuration cfg, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Stored XSS from $@.\", source.getNode(), \"database value.\"","complexity":"expert","description":"Extends the standard Stored XSS query with an additional source.","language":"javascript","name":"Extension of standard query: Stored XSS","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/extension-of-standard-query-stored-xss/"},{"code":"import javascript\n\nfrom File f\nwhere f.getBaseName() = 'index.js'\nselect f","complexity":"basic","description":"Finds files called `index.js`","language":"javascript","name":"File with given name","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/file-with-given-name/"},{"code":"import javascript\n\nfrom ClassDefinition cd\nwhere cd.getName() = 'File'\nselect cd","complexity":"basic","description":"Finds classes called 'File'","language":"javascript","name":"Find class","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/find-class/"},{"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Locatable e, AstNode def, string kind\nwhere\n  def = definitionOf(e, kind) and def.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic","description":"Generates use-definition pairs that provide the data for find-references in the code viewer.","language":"javascript","name":"Find-references links","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/find-reference-link/"},{"code":"import javascript\n\nfrom Function f\nwhere f.getNumParameter() \u003e 10\nselect f","complexity":"basic","description":"Finds functions with more than ten parameters","language":"javascript","name":"Functions with many parameters","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/functions-with-many-parameters/"},{"code":"import javascript\n\nfrom Function f\nwhere\n  exists(f.getABodyStmt()) and\n  not exists(ReturnStmt r | r.getContainer() = f)\nselect f","complexity":"basic","description":"Finds functions that do not contain a return statement","language":"javascript","name":"Functions without return statements","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/functions-without-return-statements/"},{"code":"import javascript\n\nfrom Function f\nwhere f.isGenerator()\nselect f","complexity":"basic","description":"Finds generator functions","language":"javascript","name":"Generator functions (function* foo(...))","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/generator-functions/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * A taint-tracking configuration that tracks user-controlled values into a 'userId' property sent to a backend service.\n */\nclass IdorTaint extends TaintTracking::Configuration {\n  IdorTaint() { this = \"IdorTaint\" }\n\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n\n  override predicate isSink(Node node) { exists(ClientRequest req | node = req.getADataNode()) }\n\n  override predicate isAdditionalTaintStep(Node pred, Node succ) {\n    // Step from x -\u003e { userId: x }\n    succ.(SourceNode).getAPropertyWrite(\"userId\").getRhs() = pred\n  }\n\n  override predicate isSanitizerGuard(TaintTracking::SanitizerGuardNode node) {\n    // After a check like `if (userId === session.user.id)`, the userId is considered safe.\n    node instanceof EqualityGuard\n  }\n}\n\n/**\n * A sanitizer for values that have successfully been compared to another value.\n */\nclass EqualityGuard extends TaintTracking::SanitizerGuardNode, ValueNode {\n  override EqualityTest astNode;\n\n  override predicate sanitizes(boolean outcome, Expr e) {\n    e = astNode.getAnOperand() and\n    outcome = astNode.getPolarity()\n  }\n}\n\nfrom IdorTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Unauthenticated user ID from $@.\", source.getNode(), \"here\"","complexity":"expert","description":"Finds cases where the 'userId' field in a request to another service is an arbitrary user-controlled value, indicating lack of authentication.","language":"javascript","name":"IDOR through request to backend service","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/idor-through-request-to-backend-service/"},{"code":"import javascript\n\nfrom IfStmt i\nwhere i.getThen().(BlockStmt).getNumStmt() = 0\nselect i","complexity":"basic","description":"Finds 'if' statements where the 'then' branch is an empty block statement","language":"javascript","name":"If statements with empty then branch","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/if-statement-with-empty-then-branch/"},{"code":"import javascript\n\nfrom CallExpr c\nwhere c.getCallee().stripParens() instanceof FunctionExpr\nselect c","complexity":"basic","description":"Finds calls of the form `(function(...) { ... })(...)`","language":"javascript","name":"Immediately invoked function expressions","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/immediately-invoke-function-expression/"},{"code":"import javascript\n\nfrom ImportDeclaration id\nwhere id.getImportedPath().getValue() = 'react'\nselect id","complexity":"basic","description":"Finds import statements that import from module 'react'","language":"javascript","name":"Imports from 'react'","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/imports-from-react/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * A dataflow configuration that tracks authentication tokens (\"authKey\")\n * to a postMessage call with unrestricted target origin.\n *\n * For example:\n * ```\n * win.postMessage(JSON.stringify({\n *  action: 'pause',\n *  auth: {\n *    key: window.state.authKey\n *  }\n * }), '*');\n * ```\n */\nclass AuthKeyTracking extends DataFlow::Configuration {\n  AuthKeyTracking() { this = \"AuthKeyTracking\" }\n\n  override predicate isSource(Node node) { node.(PropRead).getPropertyName() = \"authKey\" }\n\n  override predicate isSink(Node node) {\n    exists(MethodCallNode call |\n      call.getMethodName() = \"postMessage\" and\n      call.getArgument(1).getStringValue() = \"*\" and // no restriction on target origin\n      call.getArgument(0) = node\n    )\n  }\n\n  override predicate isAdditionalFlowStep(Node pred, Node succ) {\n    // Step into objects: x -\u003e { f: x }\n    succ.(SourceNode).getAPropertyWrite().getRhs() = pred\n    or\n    // Step through JSON serialization: x -\u003e JSON.stringify(x)\n    // Note: TaintTracking::Configuration includes this step by default, but not DataFlow::Configuration\n    exists(CallNode call |\n      call = globalVarRef(\"JSON\").getAMethodCall(\"stringify\") and\n      pred = call.getArgument(0) and\n      succ = call\n    )\n  }\n}\n\nfrom AuthKeyTracking cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Message leaks the authKey from $@.\", source.getNode(), \"here\"","complexity":"expert","description":"Tracks values from an 'authKey' property into a postMessage call with unrestricted origin, indicating a leak of sensitive information.","language":"javascript","name":"Information disclosure through postMessage","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/information-diclose-through-postmessage/"},{"code":"import javascript\n\nfrom JsxAttribute a\nwhere a.getName() = 'dangerouslySetInnerHTML'\nselect a","complexity":"basic","description":"Finds JSX attributes named `dangerouslySetInnerHTML`","language":"javascript","name":"JSX attributes","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/jsx-attribute/"},{"code":"import definitions\n\nexternal string selectedSourceFile();\n\nfrom Locatable e, AstNode def, string kind\nwhere def = definitionOf(e, kind) and e.getFile() = getFileBySourceArchiveName(selectedSourceFile())\nselect e, def, kind","complexity":"basic","description":"Generates use-definition pairs that provide the data for jump-to-definition in the code viewer.","language":"javascript","name":"Jump-to-definition links","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/jump-to-definition-link/"},{"code":"import javascript\n\nfrom MethodCallExpr c\nwhere\n  c.getReceiver() instanceof ThisExpr and\n  c.getMethodName() = 'isMounted'\nselect c","complexity":"basic","description":"Finds calls of the form `this.isMounted(...)`","language":"javascript","name":"Method calls","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/method-calls/"},{"code":"import javascript\n\nfrom MethodDefinition m\nwhere m.getName() = 'render'\nselect m","complexity":"basic","description":"Finds methods named 'render'","language":"javascript","name":"Method search","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/method-search/"},{"code":"import javascript\n\nfrom FunctionExpr fn\nwhere exists(fn.getName())\nselect fn","complexity":"basic","description":"Finds function expressions that have a name","language":"javascript","name":"Named function expression","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/named-function-expression/"},{"code":"import javascript\n\nfrom NewExpr new\nwhere new.getCalleeName() = 'RegExp'\nselect new","complexity":"basic","description":"Finds new expressions of the form `new RegExp(...)`","language":"javascript","name":"New expressions","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/new-expression/"},{"code":"import javascript\n\nfrom SimpleParameter p\nwhere p.getName() = 'arguments'\nselect p","complexity":"basic","description":"Finds parameters called 'arguments'","language":"javascript","name":"Parameters searched by name","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/parameter-search-by-name/"},{"code":"import javascript\nimport semmle.javascript.PrintAst\nimport definitions\n\n/**\n * Gets the source file to generate an AST from.\n */\nexternal string selectedSourceFile();\n\nclass PrintAstConfigurationOverride extends PrintAstConfiguration {\n  /**\n   * Holds if the location matches the selected file in the VS Code extension and\n   * the element is not a synthetic constructor.\n   */\n  override predicate shouldPrint(Locatable e, Location l) {\n    super.shouldPrint(e, l) and\n    l.getFile() = getFileBySourceArchiveName(selectedSourceFile())\n  }\n}","complexity":"basic","description":"Outputs a representation of a file's Abstract Syntax Tree. This query is used by the VS Code extension.","language":"javascript","name":"Print source code AST","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/print-sourcecode-ast/"},{"code":"import javascript\n\nfrom PropAccess p\nwhere p.getPropertyName() = 'innerHTML'\nselect p","complexity":"basic","description":"Finds property accesses of the form `x.innerHTML`","language":"javascript","name":"Property accesses","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/property-access/"},{"code":"import javascript\n\nfrom VarRef ref\nwhere ref.getVariable().getName() = 'var'\nselect ref","complexity":"basic","description":"Finds places where we reference a variable called `var`","language":"javascript","name":"References of a variable by name","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/references-of-a-variable-by-name/"},{"code":"import javascript\n\nfrom StringLiteral s\nwhere s.getRawValue().charAt(0) = \"'\"\nselect s","complexity":"basic","description":"Finds string literals using single quotes","language":"javascript","name":"Single-quoted string literals","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/single-quote-string-literal/"},{"code":"import javascrip\n\nfrom BlockStmt b\nwhere b.getNumStmt() = 1\nselect b","complexity":"basic","description":"Finds block statements containing a single statement","language":"javascript","name":"Singleton blocks","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/singleton-block/"},{"code":"import javascript\n\nfrom TaggedTemplateExpr e\nselect e.getTag(), e.getTemplate()","complexity":"basic","description":"Finds tagged template expressions","language":"javascript","name":"Tagged templates","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/tagged-template/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\nclass EvalTaint extends TaintTracking::Configuration {\n  EvalTaint() { this = \"EvalTaint\" }\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n  override predicate isSink(Node node) { node = globalVarRef(\"eval\").getACall().getArgument(0) }\n}\nfrom EvalTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Eval with user-controlled input from $@.\", source.getNode(),\n  \"here\"","complexity":"expert","description":"Tracks user-controlled values into 'eval' calls (special case of js/code-injection), and generates a visualizable path from the source to the sink.","language":"javascript","name":"Taint-tracking to 'eval' calls (with path visualization)","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/taint-tracking-to-evals-call-with-path-visualization/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\nclass EvalTaint extends TaintTracking::Configuration {\n  EvalTaint() { this = \"EvalTaint\" }\n\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n\n  override predicate isSink(Node node) { node = globalVarRef(\"eval\").getACall().getArgument(0) }\n}\n\nfrom EvalTaint cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"Eval with user-controlled input from $@.\", source.getNode(),\n  \"here\"","complexity":"advanced","description":"Tracks user-controlled values into 'eval' calls (special case of js/code-injection).","language":"javascript","name":"Taint-tracking to 'eval' calls","tags":"pattern ; javascript ; advanced","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/taint-tracking-to-evals-call/"},{"code":"import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\n/**\n * Gets the name of an unescaped placeholder in a lodash template.\n *\n * For example, the string `\"\u003ch1\u003e\u003c%= title %\u003e\u003c/h1\u003e\"` contains the placeholder \"title\".\n */\nbindingset[s]\nstring getAPlaceholderInString(string s) {\n  result = s.regexpCapture(\".*\u003c%=\\s*([a-zA-Z0-9_]+)\\s*%\u003e.*\", 1)\n}\n\nclass TemplateInjection extends TaintTracking::Configuration {\n  TemplateInjection() { this = \"TemplateInjection\" }\n\n  override predicate isSource(Node node) { node instanceof RemoteFlowSource }\n\n  override predicate isSink(Node node) {\n    exists(CallNode call, string placeholder |\n      call = LodashUnderscore::member(\"template\").getACall() and\n      placeholder = getAPlaceholderInString(call.getArgument(0).getStringValue()) and\n      node = call.getOptionArgument(1, placeholder)\n    )\n  }\n}\n\nfrom TemplateInjection cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink,\n  \"User-controlled value from $@ occurs unescaped in a lodash template.\", source.getNode(), \"here.\"","complexity":"expert","description":"Tracks user-controlled values to an unescaped lodash template placeholder.","language":"javascript","name":"Template injection","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/template-injection/"},{"code":"import javascript\n\nfrom StrictEqExpr eq, ModExpr mod, NumberLiteral zero, NumberLiteral two\nwhere\n  two.getValue() = \"2\" and\n  mod.getRightOperand() = two and\n  zero.getValue() = \"0\" and\n  eq.hasOperands(mod, two)\nselect eq","complexity":"basic","description":"Finds expressions of the form `e % 2 === 0`","language":"javascript","name":"Tests for even numbers","tags":"pattern ; javascript ; expert","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/test-even-number-expression/"},{"code":"import javascript\n\nfrom Comment c\nwhere c.getText().regexpMatch(\"(?si).*\\bTODO\\b.*\")\nselect c, \"TODO comments indicate that the code may not be complete.\"","complexity":"basic","description":"Finds comments containing the word TODO","language":"javascript","name":"TODO comments","tags":"pattern ; javascript ; basic","url":"https://codeql-agent-project.github.io/codeql-cheatsheet/javascript/todo-comments/"}]
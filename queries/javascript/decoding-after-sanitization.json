{ 
    "id": "decoding-after-sanitization", 
    "name": "Decoding after sanitization", 
    "date": "2022-10-20T13:10:11+07:00", 
    "language": "javascript", 
    "description": "Tracks the return value of 'escapeHtml' into 'decodeURI', indicating an ineffective sanitization attempt.", 
    "author": "LGTM", 
    "authorURL": "https://lgtm.com/query/lang:javascript/",
    "tags": ["pattern","javascript","expert"], 
    "categories": [], 
    "code": "import javascript\nimport DataFlow\nimport DataFlow::PathGraph\n\nclass DecodingAfterSanitization extends TaintTracking::Configuration {\n  DecodingAfterSanitization() { this = \"DecodingAfterSanitization\" }\n\n  override predicate isSource(Node node) { node.(CallNode).getCalleeName() = \"escapeHtml\" }\n\n  override predicate isSink(Node node) {\n    exists(CallNode call |\n      call.getCalleeName().matches(\"decodeURI%\") and\n      node = call.getArgument(0)\n    )\n  }\n}\n\nfrom DecodingAfterSanitization cfg, PathNode source, PathNode sink\nwhere cfg.hasFlowPath(source, sink)\nselect sink.getNode(), source, sink, \"URI decoding invalidates the HTML sanitization performed $@.\",\n  source.getNode(), \"here\"", 
    "complexity": "expert" 
}